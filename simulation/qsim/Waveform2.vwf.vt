// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2022 22:39:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          divisorFreq
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module divisorFreq_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [0:17] reset;
reg [0:17] set;
// wires                                               
wire [0:17] Q;
wire [0:17] QB;

// assign statements (if any)                          
divisorFreq i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.QB(QB),
	.clk(clk),
	.reset(reset),
	.set(set)
);
initial 
begin 
#1000000 $finish;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	clk = #60000 1'b0;
	clk = #80000 1'b1;
	clk = #70000 1'b0;
	clk = #90000 1'b1;
	clk = #80000 1'b0;
	clk = #90000 1'b1;
	clk = #100000 1'b0;
	clk = #80000 1'b1;
	clk = #110000 1'b0;
	clk = #70000 1'b1;
	clk = #60000 1'b0;
end 
// reset[ 17 ]
initial
begin
	reset[17] = 1'b0;
end 
// reset[ 16 ]
initial
begin
	reset[16] = 1'b0;
end 
// reset[ 15 ]
initial
begin
	reset[15] = 1'b0;
end 
// reset[ 14 ]
initial
begin
	reset[14] = 1'b0;
end 
// reset[ 13 ]
initial
begin
	reset[13] = 1'b0;
end 
// reset[ 12 ]
initial
begin
	reset[12] = 1'b0;
end 
// reset[ 11 ]
initial
begin
	reset[11] = 1'b0;
end 
// reset[ 10 ]
initial
begin
	reset[10] = 1'b0;
end 
// reset[ 9 ]
initial
begin
	reset[9] = 1'b0;
end 
// reset[ 8 ]
initial
begin
	reset[8] = 1'b0;
end 
// reset[ 7 ]
initial
begin
	reset[7] = 1'b0;
end 
// reset[ 6 ]
initial
begin
	reset[6] = 1'b0;
end 
// reset[ 5 ]
initial
begin
	reset[5] = 1'b0;
end 
// reset[ 4 ]
initial
begin
	reset[4] = 1'b0;
end 
// reset[ 3 ]
initial
begin
	reset[3] = 1'b0;
end 
// reset[ 2 ]
initial
begin
	reset[2] = 1'b0;
end 
// reset[ 1 ]
initial
begin
	reset[1] = 1'b0;
end 
// reset[ 0 ]
initial
begin
	reset[0] = 1'b0;
end 
// set[ 17 ]
initial
begin
	set[17] = 1'b0;
end 
// set[ 16 ]
initial
begin
	set[16] = 1'b0;
end 
// set[ 15 ]
initial
begin
	set[15] = 1'b0;
end 
// set[ 14 ]
initial
begin
	set[14] = 1'b0;
end 
// set[ 13 ]
initial
begin
	set[13] = 1'b0;
end 
// set[ 12 ]
initial
begin
	set[12] = 1'b0;
end 
// set[ 11 ]
initial
begin
	set[11] = 1'b0;
end 
// set[ 10 ]
initial
begin
	set[10] = 1'b0;
end 
// set[ 9 ]
initial
begin
	set[9] = 1'b0;
end 
// set[ 8 ]
initial
begin
	set[8] = 1'b0;
end 
// set[ 7 ]
initial
begin
	set[7] = 1'b0;
end 
// set[ 6 ]
initial
begin
	set[6] = 1'b0;
end 
// set[ 5 ]
initial
begin
	set[5] = 1'b0;
end 
// set[ 4 ]
initial
begin
	set[4] = 1'b0;
end 
// set[ 3 ]
initial
begin
	set[3] = 1'b0;
end 
// set[ 2 ]
initial
begin
	set[2] = 1'b0;
end 
// set[ 1 ]
initial
begin
	set[1] = 1'b0;
end 
// set[ 0 ]
initial
begin
	set[0] = 1'b0;
end 
endmodule

