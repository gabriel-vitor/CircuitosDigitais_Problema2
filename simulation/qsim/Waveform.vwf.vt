// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/12/2022 21:56:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          acumulador7b
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module acumulador7b_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [0:6] b;
reg cin;
reg clk;
reg [0:6] reset;
reg sinal;
// wires                                               
wire [0:6] Q;
wire [0:6] QB;
wire cout;

// assign statements (if any)                          
acumulador7b i1 (
// port map - connection between master ports and signals/registers   
	.Q(Q),
	.QB(QB),
	.b(b),
	.cin(cin),
	.clk(clk),
	.cout(cout),
	.reset(reset),
	.sinal(sinal)
);
initial 
begin 
#1000000 $finish;
end 
// b[ 6 ]
initial
begin
	b[6] = 1'b0;
end 
// b[ 5 ]
initial
begin
	b[5] = 1'b0;
end 
// b[ 4 ]
initial
begin
	b[4] = 1'b0;
end 
// b[ 3 ]
initial
begin
	b[3] = 1'b0;
end 
// b[ 2 ]
initial
begin
	b[2] = 1'b1;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 

// cin
initial
begin
	cin = 1'b0;
end 

// clk
initial
begin
	clk = 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
	clk = #80000 1'b1;
	clk = #80000 1'b0;
end 
// reset[ 6 ]
initial
begin
	reset[6] = 1'b0;
end 
// reset[ 5 ]
initial
begin
	reset[5] = 1'b0;
end 
// reset[ 4 ]
initial
begin
	reset[4] = 1'b0;
end 
// reset[ 3 ]
initial
begin
	reset[3] = 1'b0;
end 
// reset[ 2 ]
initial
begin
	reset[2] = 1'b0;
end 
// reset[ 1 ]
initial
begin
	reset[1] = 1'b0;
end 
// reset[ 0 ]
initial
begin
	reset[0] = 1'b0;
end 

// sinal
initial
begin
	sinal = 1'b0;
end 
endmodule

